Express Middleware

Client requests GET /users -> function app.get(/uesrs)

req. comes to server, express checks which route to run, and runs the block of code, and sends the res.

middleware - client - middleware (something in between) - function app.get

Req firstw comes to middleware, it does the processing, it can process any way like what is this requet, isn't the hacker requests, verifying details, validate anything.

If everything is okay, it forwards the request to function. and sends the res back.

If req. is not valid it returns the request from middleware itself. and ends the req, res cycle.

Middleware function gets executed on every request and response cycle.
Forwards the req, returns the req.

in one code there can be mutiple middleware,
req - mid1 -mid2 - mid3 - function
      hacker - check creds(authorized) - process
	  
access of every request and response and works as a middleman. one kind of a plugin.

express official website.

app.use((req,res,next) => {
	console.log("hello from middlware 1") // doesn't res.end or next. request is stuck
	return res.json({mg: "Hello"}) to end request 
	next();
})
req - which is coming
res- ends the res
next - next middleware in the stack, or next route

first middleware express.urlencoded first middleware and then calls the next middleware

create middleware 2, res.json(); 
middleware 1 calls middleware 2.
so you can treat them as a plugin

first middleware
req.myserName = "vidhi.shah"
console.log in next middleware
and route as well.

so what does express.urlencoded do?
It first processes the data from frontend and then cerate a object and then
req.body = asfd;

data query and get credit card info
req.creditCardNo = ..

app.use(() => {
ip ::1 because localhost
fs.appendFile("log.txt", `\n ${Date.now()} :${req.ip} ${req.method} : ${req.path}`, (err,data) => {
next();
})
})

express documentation, third party middlewares, built in middleware